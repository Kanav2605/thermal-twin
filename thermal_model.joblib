import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
import joblib

# --- Configuration ---
DATA_FILE = 'thermal_data.csv'
MODEL_FILE = 'thermal_model.joblib'
ZONES = [
    "Main Parking Lot", "Academic Block A", "Academic Block B",
    "Boys Hostel 1", "Boys Hostel 2", "Girls Hostel",
    "Sports Stadium", "Central Library", "Green Quad", "Food Court"
]

def train_model():
    print(f"Loading data from {DATA_FILE}...")
    try:
        df = pd.read_csv(DATA_FILE, parse_dates=['timestamp'])
    except FileNotFoundError:
        print(f"Error: {DATA_FILE} not found. Please generate it first.")
        return

    print(f"Loaded {len(df)} records.")

    y = df[['temp', 'uv']]

    X = pd.DataFrame()
    X['hour'] = df['timestamp'].dt.hour
    X['dayofweek'] = df['timestamp'].dt.dayofweek
    X['month'] = df['timestamp'].dt.month

    for zone in ZONES:
        X[f'zone_{zone}'] = (df['zone'] == zone).astype(int)

    print(f"Created {len(X.columns)} features.")

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    model_pipeline = Pipeline([
        ('scaler', StandardScaler()),
        ('model', RandomForestRegressor(
            n_estimators=20,
            max_depth=10,
            random_state=42,
            n_jobs=-1
        ))
    ])

    print("Training model...")
    model_pipeline.fit(X_train, y_train)

    y_pred = model_pipeline.predict(X_test)
    score = r2_score(y_test, y_pred)
    print(f"Model R^2 Score: {score:.4f}")

    joblib.dump(model_pipeline, MODEL_FILE, compress=3)
    print(f"âœ… Model saved to {MODEL_FILE}")

    return model_pipeline

if __name__ == "__main__":
    train_model()
